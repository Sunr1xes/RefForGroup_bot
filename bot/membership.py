import logging
from aiogram import Bot, BaseMiddleware
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from typing import Callable, Any, Awaitable
from aiogram.exceptions import TelegramBadRequest
from config import GROUP_CHAT_ID
from handlers.admin_menu import is_user_blocked

class CheckUserMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[Message], Awaitable[Any]],
        event: Message,
        data: dict
    ) -> Any:
        user_id = event.from_user.id # type: ignore

        if isinstance(event, Message):
            message_text = event.text or ""

                # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /start, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ FSM
            if message_text.startswith("/start"):
                parts = message_text.split()
                if len(parts) > 1 and parts[1].isdigit():
                    referrer_id = int(parts[1])
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                    state = data.get("state")
                    await state.update_data(referrer_id=referrer_id) # type: ignore
                    logging.info(f"Referrer ID {referrer_id} saved in middleware for user {user_id}")


        if await is_user_blocked(user_id): # type: ignore
            await event.answer("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º\n\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É *@refbot_admin*.", parse_mode="Markdown")
            return
        
        if not await check_membership(event.bot, event): # type: ignore
            return
        
        return await handler(event, data) # type: ignore
         
async def check_membership(bot: Bot, message: Message) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ.
    –ï—Å–ª–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É.
    
    :param bot: –ò–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    user_id = message.from_user.id  # type: ignore
    try:
        member = await bot.get_chat_member(GROUP_CHAT_ID, user_id)  # type: ignore
        if member.status in ['member', 'administrator', 'creator']:
            return True
        else:
            link_on_group = InlineKeyboardButton(text="üîó –í—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç", url="https://t.me/+LjfqGscY4PNhODUy")
            check_user_in_group = InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="check_user_in_group")
            inline_kb = InlineKeyboardMarkup(inline_keyboard=[[link_on_group], [check_user_in_group]])
            
            await message.answer(
                "‚ö† –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç.\n\n"
                "–ü–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å'.",
                parse_mode="Markdown",
                disable_web_page_preview=True,
                reply_markup=inline_kb
            )
            return False
    except TelegramBadRequest as e:
        logging.error(f"Error checking user status in chat: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤ —á–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return False
