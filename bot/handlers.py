from asyncio.log import logger
import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, Message, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
from sqlalchemy.orm import Session
from sqlalchemy.exc import SQLAlchemyError
from database import User, get_db, Referral
from config import GROUP_CHAT_ID
from utils import *

router = Router()

@router.message(Command("start"))
async def start_command(message: Message):
    bot = message.bot

    if not await check_membership(bot, message): # type: ignore
        return
    
    user_id = message.from_user.id # type: ignore
    args = message.text.split()[1:] # type: ignore

    db: Session = next(get_db())
    db_user = db.query(User).filter(User.user_id == user_id).first()

    if await is_user_in_chat(bot, GROUP_CHAT_ID, user_id): # type: ignore
        if db_user:
            await menu_handler(message, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        else:
            await prompt_for_registration(message)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å—Ç—É–ø–∏—Ç—å –≤ [—á–∞—Ç](https://t.me/+PKddIYAM4so5MzNi)", parse_mode="Markdown")
        return

    if args and not db_user:
        try:
            referrer_user_id = int(args[0])
            referrer_user = db.query(User).filter(User.user_id == referrer_user_id).first()

            if referrer_user:
                existing_referral = db.query(Referral).filter(Referral.referral_id == user_id).first()
                if existing_referral:
                    await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
                    return
                
                new_referral = Referral(user_id=referrer_user.id, referral_id = user_id)
                db.add(new_referral)
                try:
                    db.commit()
                    logger.info(f"User {user_id} was referred by {referrer_user.user_id}")
                except SQLAlchemyError as e:
                    db.rollback()
                    logger.error(f"Error saving referral to database: {e}")
                    await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            else:
                await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
        except ValueError:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
    elif not args:
        if not db_user:
            await prompt_for_registration(message)

@router.message(F.content_type == "contact")
async def contact_handler(message: Message):

    bot = message.bot
    user_id = message.from_user.id # type: ignore

    if not await is_user_in_chat(bot, GROUP_CHAT_ID, user_id): # type: ignore
        await message.answer("–í—ã –Ω–µ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —á–∞—Ç.")
        return

    contact = message.contact

    if contact is None:
        await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã.")
        return
    
    user_name = contact.first_name or ""
    last_user_name = contact.last_name or ""
    phone_number = contact.phone_number or ""
    user_id = message.from_user.id # type: ignore

    db: Session = next(get_db())
    db_user = db.query(User).filter(User.user_id == user_id).first()
    
    if not db_user:
        new_user = User(
            user_id=user_id,
            first_name=user_name,
            last_name=last_user_name,
            phone_number=phone_number
        )
        db.add(new_user)
        try:
            db.commit()
            await menu_handler(message, "–°–ø–∞—Å–∏–±–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"User {user_name} with ID {user_id} has been added to the database.")
        except SQLAlchemyError as e:
            db.rollback()
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logger.error(f"Error saving user to database: {e}")
    else:
        await menu_handler(message, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

@router.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—åüë§")
async def profile_handler(message: Message):
    bot = message.bot

    if not await check_membership(bot, message): # type: ignore
        return

    user_id = message.from_user.id # type: ignore
    db: Session = next(get_db())

    db_user = db.query(User).filter(User.user_id == user_id).first()

    if db_user:
        profile_info = (
            f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n\n"
            f"–ò–º—è: {db_user.first_name}\n"
            f"ID: {db_user.user_id}\n"
            f"–û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {db_user.referral_earnings}\n"
            f"–ë–∞–ª–∞–Ω—Å –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ: {db_user.account_balance}\n"
        )
        await message.answer(profile_info, parse_mode="Markdown")
    else:
        await message.answer("–û—à–∏–±–∫–∞. –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é /start")

@router.message(F.text == "–†–µ—Ñ–µ—Ä–∞–ª—ãü´Ç")
async def referrals_handler(message: Message):
    bot = message.bot

    if not await check_membership(bot, message): # type: ignore
        return

    user_id = message.from_user.id # type: ignore
    db: Session = next(get_db())

    db_user = db.query(User).filter(User.user_id == user_id).first()

    if db_user:
        referrals = db.query(User).join(Referral, User.id == Referral.referral_id).filter(Referral.user_id == db_user.id).all()

        if referrals:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            referral_list = "\n".join([f"{referral.first_name} (ID: {referral.user_id})" for referral in referrals])
            earnings_info = f"üí∏ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {db_user.referral_earnings} —Ä—É–±–ª–µ–π." # type: ignore
            response_text = (
                f"ü´Ç *–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:*\n\n"
                f"{referral_list}\n\n"
                f"{earnings_info}"
            )
        else:
            response_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤."

        generate_referral_url_button = InlineKeyboardButton(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—Éüîó", callback_data="generate_referral_url")
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[[generate_referral_url_button]])
    
        await message.answer(response_text, reply_markup=inline_kb, parse_mode="Markdown")
    else:
        await message.answer("–û—à–∏–±–∫–∞. –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é /start")

@router.callback_query()
async def referral_callback_handler(callback_query: types.CallbackQuery):
    if callback_query.data == "generate_referral_url":
        user_id = callback_query.from_user.id  # type: ignore
        bot_username = (await callback_query.bot.me()).username # type: ignore
        referral_link = f"https://t.me/{bot_username}?start={user_id}"

        await callback_query.message.answer(f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n`{referral_link}`", parse_mode="Markdown") # type: ignore
    
    await callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback

@router.callback_query(lambda callback_query: callback_query.data == "check_user_in_group")
async def process_check_membership(callback_query: types.CallbackQuery):
    bot = callback_query.bot
    user_id = callback_query.from_user.id  # type: ignore

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–µ
    member = await bot.get_chat_member(GROUP_CHAT_ID, user_id)
    if member.status in ['member', 'administrator', 'creator']:
        await callback_query.message.edit_text("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        await menu_handler(callback_query.message)
    else:
        await callback_query.answer("–í—ã –µ—â–µ –Ω–µ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç—É–ø–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)

@router.message(F.text == "–ü–æ–º–æ—â—åüÜò")
async def help_handler(message: Message):
    bot = message.bot

    if not await check_membership(bot, message): # type: ignore
        return

    help_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!\n\n"
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Ñ—É–Ω–∫—Ü–∏–π:\n\n"
        "üî∏ /start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
        "üî∏ –ü—Ä–æ—Ñ–∏–ª—åüë§ - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å—Ç–∞—Ç—É—Å\n"
        "üî∏ –†–µ—Ñ–µ—Ä–∞–ª—ãü´Ç - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏\n"
        "üî∏ –î–æ—Å—Ç—É–ø–Ω–∞—è —Ä–∞–±–æ—Ç–∞üí∏ - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @sss3ddd"
    )

    user_agreement = InlineKeyboardButton(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –∏ –ø—Ä–∞–≤–∏–ª–∞", callback_data="user_agreement")
    user_agreement_inline_kb = InlineKeyboardMarkup(inline_keyboard=[[user_agreement]])
    
    await message.answer(help_text, reply_markup=user_agreement_inline_kb, parse_mode="Markdown")

@router.callback_query(lambda callback_query: callback_query.data == "user_agreement")
async def user_agreement_callback_handler(callback_query: types.CallbackQuery):
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
    file_path = "user_agreement.pdf"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É —Ñ–∞–π–ª—É
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ InputFile
    document = FSInputFile(file_path, filename="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.pdf")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer_document(document) # type: ignore
    await callback_query.answer()


@router.message(Command("admin_menu"))
async def admin_menu(message: types.Message):
    logging.info(f"Admin menu called by user: {message.from_user.id}")
    if not await is_admins(message.from_user.id):
        logging.warning(f"Access denied for user: {message.from_user.id}")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="change_balance")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="delete_user")]
    ])

    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=keyboard)
    logging.info(f"Admin menu displayed for user: {message.from_user.id}")


@router.callback_query(lambda callback_query: callback_query.data == "change_balance")
async def change_balance(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <user_id> <new_balance>")
    await callback_query.answer()

@router.callback_query(lambda callback_query: callback_query.data == "change_balance")
async def change_balance_command(message: types.Message):
    logging.info(f"Received command for changing balance: {message.text}")

    if not await is_admins(message.from_user.id):
        logging.warning(f"Access denied for user {message.from_user.id}")
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <user_id> <new_balance>")
        return

    try:
        user_id = int(args[0])
        new_balance = float(args[1])
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")
        return

    if new_balance.is_integer():
        new_balance = int(new_balance)

    db: Session = next(get_db())
    db_user = db.query(User).filter(User.user_id == user_id).first()

    if db_user:
        db_user.account_balance = new_balance
        logging.info(f"Changing balance for user {user_id} to {new_balance}")
        try:
            db.commit()
            logging.info(f"Balance changed successfully for user {user_id}")
            await message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_balance}.")
        except Exception as e:
            db.rollback()
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.")
            logging.error(f"Error committing the change: {e}")
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")



@router.callback_query(lambda callback_query: callback_query.data == "delete_user")
async def process_delete_user(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <user_id>")
    await callback_query.answer()

@router.message()
async def delete_user_command(message: types.Message):
    if not await is_admins(message.from_user.id):
        return

    args = message.text.split()
    if len(args) != 1:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <user_id>")
        return

    user_id = int(args[0])

    db: Session = next(get_db())
    db_user = db.query(User).filter(User.user_id == user_id).first()

    if db_user:
        db.delete(db_user)
        try:
            db.commit()
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        except:
            db.rollback()
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")