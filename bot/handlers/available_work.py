import logging
import re
from aiogram import Router, F
from aiogram.types import Message
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from database import Vacancy, get_async_session
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy import select

router = Router()

@router.message(F.chat.type.in_(['group', 'supergroup']) & F.text.contains("#–≤–∞–∫–∞–Ω—Å–∏—è"))
async def track_vacancies(message: Message):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ö—ç—à—Ç–µ–≥–æ–º #–≤–∞–∫–∞–Ω—Å–∏—è –∏–∑ —á–∞—Ç–æ–≤.
    """
    vacancy_text = re.sub(r"#–≤–∞–∫–∞–Ω—Å–∏—è", "", message.text)  # type: ignore # –£–±–∏—Ä–∞–µ–º —Ö–µ—à—Ç–µ–≥ #–≤–∞–∫–∞–Ω—Å–∏—è
    vacancy_text = vacancy_text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞
    async with get_async_session() as session:
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await add_vacancy(session, message.chat.id, message.message_id, vacancy_text)
            logging.info(f"–í–∞–∫–∞–Ω—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏–∑ —á–∞—Ç–∞ {message.chat.id}: {vacancy_text}")
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏: {str(e)}")


async def add_vacancy(db, chat_id, message_id, text):
    new_vacancy = Vacancy(
        chat_id=chat_id,
        message_id=message_id,
        text=text
    )
    db.add(new_vacancy)
    await db.commit()

@router.callback_query(F.data == "show_vacancies")
async def show_vacancies(callback_query: CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.
    """
    if not await check_membership(bot, message):  # type: ignore
        return
    
    async with get_async_session() as db:
        try:
            result = await db.execute(select(Vacancy).filter_by(status='active'))  # type: ignore
            vacancies = result.scalars().all()

            if vacancies:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                vacancies_text = "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:*\n\n"
                for index, vacancy in enumerate(vacancies):
                    vacancies_text += f"{vacancy.text.strip()}\n"  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ç–∞–±—É–ª—è—Ü–∏–∏
                    if index < len(vacancies) - 1:
                        vacancies_text += '-'*30 + '\n\n'

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ callback_query.message –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —á–µ—Ä–µ–∑ callback_query.answer()
                await callback_query.answer(vacancies_text, parse_mode="Markdown")
            else:
                # –ï—Å–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ—Ç
                await callback_query.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ—Ç.")
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π: {str(e)}")

