import logging
import re
from aiogram import Router, F
from aiogram.types import Message
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import Vacancy, get_async_session
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy import select
from membership import check_membership

router = Router()

class NavigationVacancies(StatesGroup):
    vacancies = State()


back_button = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_vacancies_to_profile")

@router.message(F.chat.type.in_(['group', 'supergroup']) & F.text.contains("#–≤–∞–∫–∞–Ω—Å–∏—è"))
async def track_vacancies(message: Message):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ö—ç—à—Ç–µ–≥–æ–º #–≤–∞–∫–∞–Ω—Å–∏—è –∏–∑ —á–∞—Ç–æ–≤.
    """
    vacancy_text = re.sub(r"#–≤–∞–∫–∞–Ω—Å–∏—è", "", message.text)  # type: ignore # –£–±–∏—Ä–∞–µ–º —Ö–µ—à—Ç–µ–≥ #–≤–∞–∫–∞–Ω—Å–∏—è
    vacancy_text = vacancy_text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞
    async with get_async_session() as session:
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await add_vacancy(session, message.chat.id, message.message_id, vacancy_text)
            logging.info(f"–í–∞–∫–∞–Ω—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏–∑ —á–∞—Ç–∞ {message.chat.id}: {vacancy_text}")
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏: {str(e)}")


async def add_vacancy(db, chat_id, message_id, text):
    new_vacancy = Vacancy(
        chat_id=chat_id,
        message_id=message_id,
        text=text
    )
    db.add(new_vacancy)
    await db.commit()

@router.callback_query(NavigationVacancies.vacancies)
async def show_vacancies(callback_query: CallbackQuery, state: FSMContext):
    bot = callback_query.bot
    page = 1

    if callback_query.data.startswith("vacancy_page_"):  # type: ignore # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page = int(callback_query.data.split("_")[2])  # type: ignore # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data

    items_per_page = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)  # type: ignore

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–ª–µ–Ω—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not await check_membership(bot, callback_query): # type: ignore
        return

    async with get_async_session() as db:
        try:
            result = await db.execute(select(Vacancy).filter_by(status='active').order_by(desc(Vacancy.created_at)))
            vacancies = result.scalars().all()

            total_vacancies = len(vacancies)
            start = (page - 1) * items_per_page
            end = start + items_per_page
            vacancies_page = vacancies[start:end]

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–π
            vacancies_text = "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:*\n\n"
            vacancies_info = "\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n".join(
                [f"üîπ *ID:* {vacancy.id}\n"
                 f"üíº *–û–ø–∏—Å–∞–Ω–∏–µ:* {vacancy.text.strip()}\n"
                 f"üìÖ *–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:* {vacancy.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                 for vacancy in vacancies_page]) or "üîπ –í–∞–∫–∞–Ω—Å–∏–π –ø–æ–∫–∞ –Ω–µ—Ç."

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
            buttons = []

            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if page > 1:
                buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"vacancy_page_{page - 1}"))

            # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥", –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            if end < total_vacancies:
                buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"vacancy_page_{page + 1}"))

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            inline_kb = InlineKeyboardMarkup(inline_keyboard=[buttons, [back_button]])

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if callback_query.message.text != vacancies_text or callback_query.message.reply_markup != inline_kb: # type: ignore
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
                await callback_query.message.edit_text(vacancies_text + vacancies_info, parse_mode="Markdown", reply_markup=inline_kb) # type: ignore
            else:
                # –°–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–µ –∂–µ —Å–∞–º—ã–µ, –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å
                await callback_query.answer("–ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å", show_alert=False)

            await state.set_state(NavigationVacancies.vacancies)

        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
            await callback_query.message.answer("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π.")
