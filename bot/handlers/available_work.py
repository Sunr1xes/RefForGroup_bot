import logging
import re
from aiogram import Router, F
from aiogram.types import Message
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest 
from database import Vacancy, get_async_session
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy import select
from membership import is_user_blocked, check_membership

router = Router()

class NavigationVacancies(StatesGroup):
    vacancies = State()

@router.message(F.chat.type.in_(['group', 'supergroup']) & F.text.contains("#–≤–∞–∫–∞–Ω—Å–∏—è"))
async def track_vacancies(message: Message):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ö—ç—à—Ç–µ–≥–æ–º #–≤–∞–∫–∞–Ω—Å–∏—è –∏–∑ —á–∞—Ç–æ–≤.
    """
    vacancy_text = re.sub(r"#–≤–∞–∫–∞–Ω—Å–∏—è", "", message.text).strip()  # type: ignore –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞
    async with get_async_session() as session:
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await add_vacancy(session, message.chat.id, message.message_id, vacancy_text)
            logging.info(f"–í–∞–∫–∞–Ω—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏–∑ —á–∞—Ç–∞ {message.chat.id}: {vacancy_text}")
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏: {str(e)}")


async def add_vacancy(db, chat_id, message_id, text):
    new_vacancy = Vacancy(
        chat_id=chat_id,
        message_id=message_id,
        text=text
    )
    db.add(new_vacancy)
    await db.commit()

@router.message(F.text == "üë∑üèª‚Äç‚ôÇÔ∏è –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
async def show_vacancies(message: Message, state: FSMContext, page: int = 1):

    if await is_user_blocked(message.from_user.id):  # type: ignore # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        await message.answer("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        return
    
    if not await check_membership(message.bot, message):  # type: ignore # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–ª–µ–Ω—Å—Ç–≤–æ –≤ –≥—Ä—É–ø–ø–µ
        return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –≥—Ä—É–ø–ø–µ, –¥–∞–ª—å–Ω–µ–π—à–∏–π –∫–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è

    items_per_page = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

    async with get_async_session() as db:
        try:
            result = await db.execute(select(Vacancy).filter_by(status='active').order_by(Vacancy.posted_at))
            vacancies = result.scalars().all()

            total_vacancies = len(vacancies)
            start = (page - 1) * items_per_page
            end = start + items_per_page
            vacancies_page = vacancies[start:end]

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–π
            vacancies_text = "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:*\n\n"
            vacancies_info = "\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n".join(
                [f"üîπ *ID:* {vacancy.id}\n"
                 f"üíº *–û–ø–∏—Å–∞–Ω–∏–µ:*\n\n {vacancy.text.strip()}\n\n"
                 f"üìÖ *–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:* {vacancy.posted_at.strftime('%d.%m.%Y %H:%M')}\n"
                 for vacancy in vacancies_page]) or "üîπ –í–∞–∫–∞–Ω—Å–∏–π –ø–æ–∫–∞ –Ω–µ—Ç."

            # –ö–Ω–æ–ø–∫–∏ "–í–ø–µ—Ä–µ–¥" –∏ "–ù–∞–∑–∞–¥"
            keyboard_buttons = []
            if page > 1:
                keyboard_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"vacancy_page_{page - 1}"))
            if end < total_vacancies:
                keyboard_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"vacancy_page_{page + 1}"))

            inline_kb = InlineKeyboardMarkup(inline_keyboard=[keyboard_buttons], resize_keyboard=True)

            data = await state.get_data()
            last_message_id = data.get('last_message_id')
            if last_message_id:
                try:
                    await message.bot.delete_message(message.chat.id, last_message_id)  # type: ignore
                except TelegramBadRequest:
                    pass

            new_message = await message.answer(vacancies_text + vacancies_info, parse_mode="Markdown", reply_markup=inline_kb)
            await state.update_data(last_message_id=new_message.message_id)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await state.update_data(page=page)

        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
            await message.answer("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π.")  # type: ignore


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–í–ø–µ—Ä–µ–¥" –∏ "–ù–∞–∑–∞–¥"
@router.callback_query(F.data.startswith("vacancy_page_"))
async def change_page(callback_query: CallbackQuery, state: FSMContext):

    bot = callback_query.bot

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π
    data = await state.get_data()
    last_message_id = data.get('last_message_id')
    if last_message_id:
        await bot.delete_message(callback_query.message.chat.id, last_message_id) # type: ignore

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    page = int(callback_query.data.split("_")[-1]) # type: ignore
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ
    await show_vacancies(callback_query.message, state, page)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback, —á—Ç–æ–±—ã –Ω–µ –≤–∏—Å–µ–ª "—á–∞—Å–∏–∫" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await callback_query.answer()

