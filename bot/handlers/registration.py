import logging
import asyncio
from aiogram import Router, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from database import User, get_async_session 
from aiogram.filters import Command
from sqlalchemy.future import select
from sqlalchemy.exc import SQLAlchemyError
from utils import prompt_for_registration, menu_handler
from referral_system import ReferralSystem
from membership import check_membership, is_user_blocked

#TODO –¥–æ–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ñ–∏–æ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
#TODO —á—É—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤—ã–º

router = Router()

class Registration(StatesGroup):
    waiting_for_full_name = State()
    waiting_for_contact = State()

@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    """
    –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, —Ç–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞.
    –í –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞—è—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞.
    """

    if await is_user_blocked(message.from_user.id):  # type: ignore # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        await message.answer("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        return
    
    if not await check_membership(message.bot, message):  # type: ignore # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–ª–µ–Ω—Å—Ç–≤–æ –≤ –≥—Ä—É–ø–ø–µ
        return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –≥—Ä—É–ø–ø–µ, –¥–∞–ª—å–Ω–µ–π—à–∏–π –∫–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è

    user_id = message.from_user.id  # type: ignore

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–ª–µ–Ω—Å—Ç–≤–∞ –≤ –≥—Ä—É–ø–ø–µ
    async with get_async_session() as db:
        result = await db.execute(select(User).filter(User.user_id == user_id))
        db_user = result.scalar_one_or_none()

        if db_user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–º—É –º–µ–Ω—é
            await menu_handler(message, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!")
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
            if len(message.text.split()) > 1:  # type: ignore
                referrer_id = int(message.text.split()[1])  # type: ignore # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
                await state.update_data(referrer_id=referrer_id)

            # –ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –§–ò–û –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "*–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á –ò–≤–∞–Ω–æ–≤*.",
                parse_mode="Markdown"
            )
            await state.set_state(Registration.waiting_for_full_name.state)


    
@router.message(Registration.waiting_for_full_name)
async def process_full_name(message: Message, state: FSMContext):
    full_name = message.text.strip()  # type: ignore # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —Ç—Ä–∏ —Å–ª–æ–≤–∞ –∏ –≤—Å–µ —Å–ª–æ–≤–∞ —Å–æ—Å—Ç–æ—è—Ç –∏–∑ –±—É–∫–≤
    if len(full_name.split()) != 3 or not all(word.isalpha() for word in full_name.split()):
        await message.answer(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n"
            "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á –ò–≤–∞–Ω–æ–≤"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    await state.update_data(full_name=full_name)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await prompt_for_registration(message)
    await state.set_state(Registration.waiting_for_contact)


@router.message(Registration.waiting_for_contact, F.content_type == "contact")
async def contact_handler(message: Message, state: FSMContext):

    bot = message.bot
    user_id = message.from_user.id  # type: ignore

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–ª–µ–Ω—Å—Ç–≤–∞ –≤ –≥—Ä—É–ø–ø–µ

    contact = message.contact

    if contact is None:
        await message.answer("‚ùó –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã.")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    user_name_tg = contact.first_name or ""
    last_user_name_tg = contact.last_name or ""
    phone_number = contact.phone_number or ""
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    user_data = await state.get_data()
    full_name = user_data.get("full_name")
    referrer_id = user_data.get("referrer_id")

    if not full_name:
        await message.answer("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞.")
        return

    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –Ω–∞ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ
        last_name, first_name, patronymic = full_name.split()  # type: ignore
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ.")
        return

    # –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    async with get_async_session() as db:
        result = await db.execute(select(User).filter(User.user_id == user_id))
        db_user = result.scalar_one_or_none()

        if not db_user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_user = User(
                user_id=user_id,
                first_name_tg=user_name_tg,
                last_name_tg=last_user_name_tg,
                last_name=last_name,
                first_name=first_name,
                patronymic=patronymic,
                phone_number=phone_number
            )
            db.add(new_user)
            try:
                await db.commit()
                logging.info(f"User {last_name, first_name, patronymic} - {user_name_tg} with ID {user_id} has been added to the database.")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if referrer_id:
                    success, msg = await ReferralSystem.process_referral(user_id, referrer_id)
                    await message.answer(msg)
                    
                await menu_handler(message, "üéâ –°–ø–∞—Å–∏–±–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")

                logging.info(f"User {last_name, first_name, patronymic} - {user_name_tg} with ID {user_id} has been added to the database.")
            except SQLAlchemyError as e:
                await db.rollback()
                await message.answer("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                logging.error(f"Error saving user to database: {e}")
        
    await state.clear()

