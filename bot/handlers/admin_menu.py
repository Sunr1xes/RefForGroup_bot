import logging
import asyncio
import gspread
import pytz
from datetime import datetime, timedelta
from google.oauth2.service_account import Credentials
from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest
from aiolimiter import AsyncLimiter
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy.orm import joinedload
from sqlalchemy.future import select
from sqlalchemy import delete, func
from utils import is_admins, send_transaction_list, save_previous_state, get_bank_and_phone
from config import GROUP_CHAT_ID, REFERRAL_PERCENTAGE
from database import get_async_session, User, WithdrawalHistory, BlackList, Referral, ReceiptHistory, Vacancy

#TODO —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∫—É –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π

router = Router()
limiter = AsyncLimiter(30, 1)

scopes = ["https://www.googleapis.com/auth/spreadsheets"]
creds = Credentials.from_service_account_file("credentials.json", scopes=scopes)
client = gspread.authorize(creds) # type: ignore

class AdminMenu(StatesGroup):
    menu = State()
    funds_transfer = State()
    change_balance = State()
    blacklist_user = State()
    unblock_user = State()
    delete_user = State()
    change_vacancies = State()
    transaction = State()
    broadcast = State()
    info_about_user = State()
    info_about_bot = State()

back_button = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_in_admin_menu")

@router.message(Command("admin_menu"))
async def admin_menu(message: types.Message, state: FSMContext):
    """ 
    –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /admin_menu. 
    """
    await save_previous_state(state)
    user_id = message.from_user.id  # type: ignore
    logging.info(f"Admin menu called by user: {user_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not await is_admins(user_id):
        logging.warning(f"Access denied for user: {user_id}")
        return

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", callback_data="funds_transfer")],
        [InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="change_balance")],
        [InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="blacklist_user")],
        [InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="unblock_user")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="delete_user")],
        [InlineKeyboardButton(text="üìù –í–∞–∫–∞–Ω—Å–∏–∏", callback_data="change_vacancies")],
        [InlineKeyboardButton(text="üßæ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="transactions")],
        [InlineKeyboardButton(text="üì® –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast")],
        [InlineKeyboardButton(text="üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", callback_data="info_about_user")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", callback_data="info_about_bot")],
    ])

    text = "‚öôÔ∏è *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞* ‚öôÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
    await state.update_data(last_message=text)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥–º–∏–Ω—Å–∫–∏–º –º–µ–Ω—é
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
    await state.set_state(AdminMenu.menu)
    logging.info(f"Admin menu displayed for user: {user_id}")


@router.callback_query(F.data == "funds_transfer")
async def funds_transfer(callback_query: CallbackQuery, state: FSMContext):
    """
    –ü–æ docs google –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —Å—á–µ—Ç–∞ –æ—Ç—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Ä–µ—Ñ–µ—Ä—Ä–µ—Ä–∞–º.
    """
    await callback_query.bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)  # type: ignore
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[[back_button]])
    await callback_query.message.answer( # type: ignore
        "üí∏ *–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ docs google:",
        parse_mode="Markdown",
        reply_markup=inline_kb
    )
    await state.set_state(AdminMenu.funds_transfer)


@router.message(AdminMenu.funds_transfer)
async def funds_transfer_command(message: Message, state: FSMContext):
    logging.info(f"Received command for funds transfer: {message.text}")

    if not await is_admins(message.from_user.id):  # type: ignore
        logging.warning(f"Access denied for user {message.from_user.id}")  # type: ignore
        return
    
    doc_url = message.text

    if not doc_url.startswith("https://docs.google.com/"):  # type: ignore
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    sheet = client.open_by_url(doc_url)  # type: ignore
    worksheet = sheet.get_worksheet(0)
    rows = worksheet.get_all_records()

    async with get_async_session() as session:
        with session.no_autoflush:  # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ session.no_autoflush
            for row in rows:
                try:
                    user_id = int(row["ID tg"])
                    earning = float(row["–∑–ø"])

                    result = await session.execute(select(User).where(User.user_id == user_id))
                    user = result.scalar_one_or_none()

                    if user:
                        user.account_balance += earning
                        user.work_earnings += earning

                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π
                        receipt_history = ReceiptHistory(
                            user_id=user.user_id,
                            amount=earning,
                            description="–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Å–º–µ–Ω—É"
                        )
                        session.add(receipt_history)

                        results = await session.execute(select(Referral).where(Referral.referral_id == user.id))
                        referral = results.scalar_one_or_none()

                        if referral:
                            result = await session.execute(select(User).where(User.id == referral.user_id))
                            referrer = result.scalar_one_or_none()
                            if referrer:
                                referrer_earning = earning * REFERRAL_PERCENTAGE
                                referrer.referral_earnings += referrer_earning
                                referrer.account_balance += referrer_earning

                                referrer_receipt_history = ReceiptHistory(
                                    user_id=referrer.user_id,
                                    amount=referrer_earning,
                                    description=f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user.user_id}"
                                )
                                session.add(referrer_receipt_history)

                        await session.commit()
                    else:
                        logging.warning(f"User with ID {user_id} not found.")
                        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                except SQLAlchemyError as e:
                    await session.rollback()
                    logging.error(f"Error processing row: {row}")
                    logging.error(f"Error: {e}")
                    await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
    
    await state.clear()
    await message.answer("‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã.")


@router.callback_query(F.data == "change_balance")
async def change_balance(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å.
    """
    await callback_query.bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)  # type: ignore
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[[back_button]])
    await callback_query.message.answer( # type: ignore
        "üí≥ *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "`<user_id> <new_balance>`\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `123456789 1000`",
        parse_mode="Markdown",
        reply_markup=inline_kb
    )  # type: ignore
    await state.set_state(AdminMenu.change_balance)


@router.message(AdminMenu.change_balance)
async def change_balance_command(message: Message, state: FSMContext):
    logging.info(f"Received command for changing balance: {message.text}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await is_admins(message.from_user.id):  # type: ignore
        logging.warning(f"Access denied for user {message.from_user.id}")  # type: ignore
        return

    # –ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    args = message.text.split()  # type: ignore
    if len(args) != 2:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `<user_id> <new_balance>`", parse_mode="Markdown")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    try:
        user_id = int(args[0])
        new_balance = float(args[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è ID –∏ –±–∞–ª–∞–Ω—Å–∞.")
        return

    # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫ —Ü–µ–ª–æ–º—É —á–∏—Å–ª—É, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
    if new_balance.is_integer():
        new_balance = int(new_balance)

    # –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    async with get_async_session() as db:
        result = await db.execute(select(User).filter(User.user_id == user_id))
        db_user = result.scalar_one_or_none()

        if db_user:
            db_user.account_balance = new_balance
            logging.info(f"Changing balance for user {user_id} to {new_balance}")
            try:
                await db.commit()
                logging.info(f"Balance changed successfully for user {user_id}")
                await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID `{user_id}` —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ `{new_balance}` ‚ÇΩ.", parse_mode="Markdown")
            except SQLAlchemyError as e:
                await db.rollback()
                await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                logging.error(f"Error committing the change: {e}")
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()


async def is_user_blocked(user_id: int) -> bool:
    async with get_async_session() as session:
        result = await session.execute(select(BlackList).where(BlackList.user_id == user_id))
        blocked_user = result.scalar_one_or_none()
        return blocked_user is not None


@router.callback_query(F.data == "blacklist_user")
async def blacklist_user(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ß–µ—Ä–Ω—ã–∏ÃÜ —Å–ø–∏—Å–æ–∫" –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
    """
    await callback_query.bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)  # type: ignore
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[[back_button]])
    await callback_query.message.answer("üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`<user_id>`", # type: ignore
                                        parse_mode="Markdown", 
                                        reply_markup=inline_kb
                                        )
    await state.set_state(AdminMenu.blacklist_user)


@router.message(AdminMenu.blacklist_user)
async def blacklist_user_command(message: Message, state: FSMContext):
    logging.info(f"Received command for blacklisting user: {message.text}")

    if not await is_admins(message.from_user.id):  # type: ignore
        logging.warning(f"Access denied for user {message.from_user.id}")  # type: ignore
        return
    
    args = message.text.split()  # type: ignore
    if len(args) != 1:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `<user_id>`", parse_mode="Markdown")
        return
    
    try:
        user_id = int(args[0])
    except (IndexError, ValueError):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ID.")
        return
    
    if await is_user_blocked(user_id):
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        async with get_async_session() as session:
            result = await session.execute(select(User).where(User.user_id == user_id))
            db_user = result.scalar_one_or_none()
            if db_user:
                try:
                    new_blacklist = BlackList(
                        user_id=db_user.user_id
                    )
                    session.add(new_blacklist)
                    await session.commit()
                    try:
                        await message.bot.ban_chat_member( # type: ignore
                            chat_id=GROUP_CHAT_ID, # type: ignore
                            user_id=db_user.user_id
                        )
                        logging.info(f"User {user_id} added to blacklist and kicked from the group.")
                        await message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —á–∞—Ç–∞.")
                    except TelegramBadRequest as e:
                        logging.error(f"Error kicking user {user_id} from the group: {e}")
                        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ —á–∞—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

                except SQLAlchemyError as e:
                    await session.rollback()
                    logging.error(f"Error adding user to blacklist: {e}")
                    await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.")
                    return
            else:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        await state.clear()
           

@router.callback_query(F.data == "unblock_user")
async def unblock_user(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
    """
    await callback_query.bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)  # type: ignore
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[[back_button]])
    await callback_query.message.answer( # type: ignore
        "‚úÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`<user_id>`",
        parse_mode="Markdown", 
        reply_markup=inline_kb
    )
    await state.set_state(AdminMenu.unblock_user)

@router.message(AdminMenu.unblock_user)
async def unblock_user_command(message: Message, state: FSMContext):
    logging.info(f"Received command for unblocking user: {message.text}")

    if not await is_admins(message.from_user.id):  # type: ignore
        return
    
    args = message.text.split()  # type: ignore
    if len(args) != 1:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `<user_id>`", parse_mode="Markdown")
        return
    
    try:
        user_id = int(args[0])
    except (IndexError, ValueError):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ID.")
        return
    
    if not await is_user_blocked(user_id):
        await message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        async with get_async_session() as session:
            result = await session.execute(select(BlackList).where(BlackList.user_id == user_id))
            db_user = result.scalar_one_or_none()
            if db_user:
                try:
                    await session.delete(db_user)
                    await session.commit()
                    logging.info(f"Admin {message.from_user.id} User unblocked user {user_id}") # type: ignore
                    await message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
                    try:
                        await message.bot.unban_chat_member(chat_id=GROUP_CHAT_ID, user_id=user_id) # type: ignore
                        await message.bot.send_message(user_id, "‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –º–æ–∂–µ—Ç–µ –∑–∞–π—Ç–∏ –≤ —á–∞—Ç.\n–ë–æ–ª—å—à–µ –Ω–µ –Ω–∞—Ä—É—à–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞.\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")  # type: ignore
                    except Exception as e: 
                        logging.error(f"Error sending message to user {user_id}: {e}")
                except SQLAlchemyError as e:
                    await session.rollback()
                    logging.error(f"Error unblocking user: {e}")
                    await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                    return
            else:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        await state.clear()

@router.callback_query(F.data == "transactions")
async def list_transactions(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏" –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.
    """

    user_id = callback_query.from_user.id  # type: ignore
    logging.info(f"Admin menu called by user: {user_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not await is_admins(user_id):
        logging.warning(f"Access denied for user: {user_id}")
        return

    bot = callback_query.bot

    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)  # type: ignore
    await callback_query.message.answer("üìã *–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏* üìã", parse_mode="Markdown")  # type: ignore

    async with get_async_session() as db:
        try:
            # –°—Ä–æ—á–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            urgent_transactions = await db.execute(
                select(WithdrawalHistory)
                .options(joinedload(WithdrawalHistory.user))  # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                .filter(WithdrawalHistory.is_urgent == True, WithdrawalHistory.status == 'pending')
                .order_by(WithdrawalHistory.withdrawal_date)
            )
            urgent_transactions = urgent_transactions.scalars().all()

            # –û–±—ã—á–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            normal_transactions = await db.execute(
                select(WithdrawalHistory)
                .options(joinedload(WithdrawalHistory.user))  # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                .filter(WithdrawalHistory.is_urgent == False, WithdrawalHistory.status == 'pending')
                .order_by(WithdrawalHistory.withdrawal_date)
            )
            normal_transactions = normal_transactions.scalars().all()

        except SQLAlchemyError as e:
            logging.error(f"Error fetching transactions: {e}")
            await bot.send_message(callback_query.message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")  # type: ignore
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        await send_transaction_list(bot, callback_query.message.chat.id, urgent_transactions, "üî• –°—Ä–æ—á–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏") # type: ignore
        await send_transaction_list(bot, callback_query.message.chat.id, normal_transactions, "üíº –û–±—ã—á–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏") # type: ignore

    await callback_query.answer()

@router.callback_query(F.data.startswith("approve_"))
async def approve_transaction(callback_query: types.CallbackQuery):

    user_id = callback_query.from_user.id  # type: ignore
    bot = callback_query.bot

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not await is_admins(user_id):
        logging.warning(f"Access denied for user: {user_id}")
        return
    
    txn_id = int(callback_query.data.split("_")[1]) # type: ignore

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with get_async_session() as db:
        result = await db.execute(select(WithdrawalHistory).filter(WithdrawalHistory.id == txn_id))
        transaction = result.scalar_one_or_none()

        await callback_query.message.edit_reply_markup(reply_markup=None) # type: ignore

        if transaction and transaction.status == 'pending':
            transaction.status = 'approved'
            await db.commit()
            await callback_query.answer(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ID {txn_id} –æ–¥–æ–±—Ä–µ–Ω–∞.", show_alert=True)
            await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)  # type: ignore
        else:
            await callback_query.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–¥–æ–±—Ä–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.", show_alert=True)

@router.callback_query(F.data.startswith("cancel_"))
async def cancel_transaction(callback_query: CallbackQuery):

    user_id = callback_query.from_user.id  # type: ignore
    bot = callback_query.bot

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not await is_admins(user_id):
        logging.warning(f"Access denied for user: {user_id}")
        return
    
    txn_id = int(callback_query.data.split("_")[1]) # type: ignore

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with get_async_session() as db:
        result = await db.execute(select(WithdrawalHistory).filter(WithdrawalHistory.id == txn_id))
        transaction = result.scalar_one_or_none()

        await callback_query.message.edit_reply_markup(reply_markup=None) # type: ignore

        if transaction and transaction.status == 'pending':
            transaction.status = 'cancelled'
            await db.commit()
            await callback_query.answer(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ID {txn_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=True)
            await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)  # type: ignore
        else:
            await callback_query.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.", show_alert=True)


@router.callback_query(F.data == "delete_user")
async def process_delete_user(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è".
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    """
    await callback_query.bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)  # type: ignore
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[[back_button]])
    await callback_query.message.answer("üóë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`<user_id>`\n\n–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ, —Ç–∞–∫ –∫–∞–∫ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö", # type: ignore
                                        parse_mode="Markdown", 
                                        reply_markup=inline_kb
                                        )
    await state.set_state(AdminMenu.delete_user)


@router.message(AdminMenu.delete_user)
async def delete_user_command(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.
    –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    logging.info(f"Received command for deleting user: {message.text}")
    if not await is_admins(message.from_user.id):  # type: ignore
        logging.warning(f"Access denied for user {message.from_user.id}")  # type: ignore
        return

    args = message.text.split()  # type: ignore
    if len(args) != 1:
        await message.answer("‚ùóÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `<user_id>`", parse_mode="Markdown")
        return

    try:
        user_id = int(args[0])
    except ValueError:
        await message.answer("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    async with get_async_session() as db:
        await db.execute(delete(Referral).where(Referral.user_id == user_id))
        await db.execute(delete(Referral).where(Referral.referral_id == user_id))

        result = await db.execute(select(User).filter(User.user_id == user_id))
        db_user = result.scalar_one_or_none()

        if db_user:
            try:
                await db.delete(db_user)
                await db.commit()
                await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{user_id}` –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", parse_mode="Markdown")
            except SQLAlchemyError as e:
                await db.rollback()
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                logging.error(f"Error committing the change: {e}")
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    await state.clear()


@router.message(F.data == "change_vacancies")
async def process_change_vacancies(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏".
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ID –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.
    """
    await callback_query.bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)  # type: ignore
    if not await is_admins(callback_query.from_user.id):  # type: ignore
        logging.warning(f"Access denied for user: {callback_query.from_user.id}")  # type: ignore
        return
    
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[[back_button]])
    await callback_query.message.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`<vacancy_id>`", # type: ignore
                                        parse_mode="Markdown", 
                                        reply_markup=inline_kb
                                        )
    await state.set_state(AdminMenu.change_vacancies)

@router.message(AdminMenu.change_vacancies)
async def change_vacancies_command(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.
    """
    logging.info(f"Received command for changing vacancies: {message.text}")
    if not await is_admins(message.from_user.id):  # type: ignore
        logging.warning(f"Access denied for user {message.from_user.id}")  # type: ignore
        return
    
    args = message.text.split() # type: ignore
    if len(args) != 1:
        await message.answer("‚ùóÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `<vacancy_id>`", parse_mode="Markdown")
        return
    
    try:
        vacancy_id = int(args[0])
    except ValueError:
        await message.answer("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤–∞–∫–∞–Ω—Å–∏–∏.")
        return
    
    async with get_async_session() as db:
        result = await db.execute(select(Vacancy).where(Vacancy.id == vacancy_id))
        db_vacancy = result.scalar_one_or_none()
        if db_vacancy:
            try:
                db_vacancy.status = 'inactive'
                await db.commit()
                await message.answer(f"‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —Å ID `{vacancy_id}` –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–Ω—á–µ–Ω–∞.", parse_mode="Markdown")
            except SQLAlchemyError as e:
                await db.rollback()
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                logging.error(f"Error committing the change: {e}")
        else:
            await message.answer("‚ùå –í–∞–∫–∞–Ω—Å–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    await state.clear()

@router.callback_query(F.data == "broadcast")
async def process_broadcast(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–∞—Å—Å—ã–ª–∫–∞".
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.
    """
    await callback_query.bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)  # type: ignore
    if not await is_admins(callback_query.from_user.id):  # type: ignore
        logging.warning(f"Access denied for user: {callback_query.from_user.id}")  # type: ignore
        return
    
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[[back_button]])
    await callback_query.message.answer("üì® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`<message>`", # type: ignore
                                        parse_mode="Markdown", 
                                        reply_markup=inline_kb
                                        )
    await state.set_state(AdminMenu.broadcast)


@router.message(AdminMenu.broadcast)
async def broadcast_command(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.
    –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    logging.info(f"Received command for broadcasting: {message.text}")
    if not await is_admins(message.from_user.id):  # type: ignore
        logging.warning(f"Access denied for user {message.from_user.id}")  # type: ignore
        return

    message_text = message.text
    
    await message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å. –û–∂–∏–¥–∞–∏ÃÜ—Ç–µ...")
    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing") # type: ignore
    
    try:
        async with get_async_session() as db:
            result = await db.execute(select(User))
            users = result.scalars().all()

        sent_count = 0
        failed_count = 0

        async def send_message_to_users(user):
            nonlocal sent_count, failed_count
            try:
                async with limiter:
                    await message.bot.send_message(chat_id=user.user_id, text=message_text, parse_mode="Markdown") # type: ignore
                    sent_count += 1
            except Exception as e:
                logging.error(f"Failed to send message to user {user}: {e}")
                failed_count += 1

        await message.bot.delete_message(message.chat.id, message.message_id) # type: ignore
        await asyncio.gather(*(send_message_to_users(user) for user in users))
        await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}. –û—à–∏–±–æ–∫: {failed_count}.")
    
    except SQLAlchemyError as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n{e}")
        logging.error(f"Error committing the change: {e}")
    
    await state.clear()

@router.callback_query(F.data == "info_about_user")
async def info_about_user(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ".
    """
    await callback_query.bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id) # type: ignore
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[[back_button]])
    await callback_query.message.answer(  # type: ignore
        "üë§ *–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
        parse_mode="Markdown",
        reply_markup=inline_kb
    )
    await state.set_state(AdminMenu.info_about_user)

@router.message(AdminMenu.info_about_user)
async def info_about_user_command(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ".
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    """
    logging.info(f"Received command for getting info about user: {message.text}")

    if not await is_admins(message.from_user.id):  # type: ignore
        logging.warning(f"Access denied for user {message.from_user.id}")  # type: ignore
        return
    
    try:
        user_id = int(message.text.strip()) # type: ignore
    except ValueError:
        await message.answer("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    async with get_async_session() as session:
        result = await session.execute(
            select(User)
            .options(joinedload(User.referrals), joinedload(User.withdrawals), joinedload(User.receipt_history))
            .where(User.user_id == user_id)
        )
        db_user = result.unique().scalar_one_or_none()

        if not db_user:
            await message.answer("‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω.")
            return

        user_info = (
            f"üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ*\n\n"
            f"ID: {db_user.user_id}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {db_user.created_at.astimezone(pytz.timezone('Europe/Moscow')).strftime('%d.%m.%Y %H:%M')}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {db_user.last_activity.astimezone(pytz.timezone('Europe/Moscow')).strftime('%d.%m.%Y %H:%M')}\n"
            f"–ò–º—è TG: {db_user.first_name_tg} {db_user.last_name_tg or ''}\n"
            f"–§–ò–û: {db_user.last_name} {db_user.first_name} {db_user.patronymic or ''}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {db_user.phone_number}\n"
            f"–ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞: {db_user.account_balance:.2f} ‚ÇΩ\n"
            f"–ó–∞—Ä–∞–±–æ—Ç–æ–∫ –æ—Ç —Ä–∞–±–æ—Ç—ã: {db_user.work_earnings:.2f} ‚ÇΩ\n"
            f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {db_user.referral_earnings:.2f} ‚ÇΩ\n\n"
        )

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
        if db_user.referrals:
            user_info += f"üë• *–†–µ—Ñ–µ—Ä–∞–ª—ã*:\n"
            for referral in db_user.referrals:
                referred_user_result = await session.execute(select(User).where(User.id == referral.referral_id))
                referred_user = referred_user_result.scalar_one_or_none()
                if referred_user:
                    user_info += (
                        f"- ID: {referred_user.user_id}, –§–ò–û: {referred_user.last_name} "
                        f"{referred_user.first_name} {referred_user.patronymic or ''}\n"
                    )
            user_info += "\n"

        # –í—ã–≤–æ–¥–∏–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π
        if db_user.receipt_history:
            user_info += f"üí∏ *–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π*:\n"
            for receipt in db_user.receipt_history:
                user_info += f"- {receipt.date.strftime('%Y-%m-%d %H:%M')} - {receipt.amount:.2f} ‚ÇΩ - {receipt.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
            user_info += "\n"

        # –í—ã–≤–æ–¥–∏–º –∏—Å—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–æ–≤ —Å—Ä–µ–¥—Å—Ç–≤
        if db_user.withdrawals:
            user_info += f"üì§ *–ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤ —Å—Ä–µ–¥—Å—Ç–≤*:\n"
            for withdrawal in db_user.withdrawals:
                user_info += f"- {withdrawal.withdrawal_date.strftime('%Y-%m-%d %H:%M')} - {withdrawal.amount:.2f} ‚ÇΩ - –°—Ç–∞—Ç—É—Å: {withdrawal.status}\n" + f"- {'–ë—ã—Å—Ç—Ä—ã–π' if withdrawal.is_urgent else '–û–±—ã—á–Ω—ã–π'} - {await get_bank_and_phone(session, withdrawal.id) or '–ù–µ—Ç'}\n\n"
            user_info += "\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await message.answer(user_info, parse_mode="Markdown")

    await state.clear()


@router.callback_query(F.data == "info_about_bot")
async def info_about_bot(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ".
    """
    async with get_async_session() as session:
        try:
            result = await session.execute(select(func.count(User.id)))
            total_users = result.scalar()

            one_day_ago = datetime.now() - timedelta(days=1)
            result = await session.execute(select(func.count(User.id)).where(User.created_at >= one_day_ago))
            new_users = result.scalar()

            one_week_ago = datetime.now() - timedelta(days=7)
            result = await session.execute(select(func.count(User.id)).where(User.last_activity >= one_week_ago))
            active_users = result.scalar()

            one_month_ago = datetime.now() - timedelta(days=30)
            result = await session.execute(select(func.count(User.id)).where(User.created_at >= one_month_ago))
            users_month = result.scalar()

            if total_users > 0:
                active_users_percentage = (active_users / total_users) * 100
            else:
                active_users_percentage = 0.0

            statistic_info = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞:\n\n"
                f"üîπ –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ 24 —á–∞—Å–∞: {new_users}\n"
                f"üîπ –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –º–µ—Å—è—Ü: {users_month}\n"
                f"üîπ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é: {active_users}\n"
                f"üîπ –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users_percentage:.2f}%\n"
                f"üîπ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_users}"
            )

            inline_kb = InlineKeyboardMarkup(inline_keyboard=[[back_button]])

            await callback_query.message.edit_text(statistic_info, reply_markup=inline_kb) # type: ignore
        except SQLAlchemyError as e:
            logging.error(f"Error: {e}")
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏") # type: ignore

    await callback_query.answer()
    await state.set_state(AdminMenu.info_about_bot)


@router.callback_query(F.data == "back_in_admin_menu", StateFilter("*"))
async def back_in_admin_menu(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    data = await state.get_data()
    last_message = data.get("last_message")

    if not last_message:
        last_message = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        return
    
    current_state = await state.get_state()

    if current_state in [AdminMenu.delete_user, AdminMenu.change_balance, AdminMenu.blacklist_user, AdminMenu.unblock_user, AdminMenu.broadcast, AdminMenu.funds_transfer, AdminMenu.change_vacancies, AdminMenu.info_about_user, AdminMenu.info_about_bot]:
        #await callback_query.bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id) # type: ignore
        await callback_query.message.edit_text( # type: ignore
            text=last_message,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üí∏ –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", callback_data="funds_transfer")],
                    [InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="change_balance")],
                    [InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="blacklist_user")],
                    [InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="unblock_user")],
                    [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="delete_user")],
                    [InlineKeyboardButton(text="üìù –í–∞–∫–∞–Ω—Å–∏–∏", callback_data="change_vacancies")],
                    [InlineKeyboardButton(text="üßæ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="transactions")], 
                    [InlineKeyboardButton(text="üì® –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast")],
                    [InlineKeyboardButton(text="üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", callback_data="info_about_user")],
                    [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", callback_data="info_about_bot")]
                ]
            ),
            parse_mode="Markdown"
        )
        await state.set_state(AdminMenu.menu)
    else:
        await callback_query.message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") # type: ignore
        await state.clear()
