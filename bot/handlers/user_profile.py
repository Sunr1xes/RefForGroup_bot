import logging
import pytz
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.filters import StateFilter
from sqlalchemy.future import select
from sqlalchemy import insert, desc
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy.exc import SQLAlchemyError
from database import User, get_async_session, WithdrawalHistory
from membership import check_membership
from utils import save_previous_state
from config import STATUS_MAP

router = Router()

class NavigationForProfile(StatesGroup):
    profile = State()
    money_withdrawal = State()
    history_of_withdrawal = State()
    instant_withdrawal = State()
    slow_withdrawal = State()
    
back_button = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_in_profile")

@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: Message, state: FSMContext):
    await save_previous_state(state)
    bot = message.bot
    user_id = message.from_user.id  # type: ignore

    if not await check_membership(bot, message):  # type: ignore
        return

    async with get_async_session() as db:
        try:
            result = await db.execute(select(User).filter(User.user_id == user_id))
            db_user = result.scalar_one_or_none()

            if db_user:
                # –ö–Ω–æ–ø–∫–∏ —Å –∏—Å—Ç–æ—Ä–∏—è–º–∏ –≤—ã–≤–æ–¥–æ–≤ –∏ –∑–∞–ø—Ä–æ—Å–æ–º –≤—ã–≤–æ–¥–∞
                history_of_withdrawal = InlineKeyboardButton(text="üíº –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤", callback_data="history_of_withdrawal")
                money_withdrawal = InlineKeyboardButton(text="üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", callback_data="money_withdrawal")
                inline_kb = InlineKeyboardMarkup(inline_keyboard=[[history_of_withdrawal, money_withdrawal]])

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
                profile_info = (
                    f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
                    f"üìõ *–ò–º—è:* {db_user.first_name_tg}\n"
                    f"üÜî *ID:* `{db_user.user_id}`\n"
                    f"üíº *–û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫:* {db_user.referral_earnings}‚ÇΩ\n"
                    f"üí∞ *–ë–∞–ª–∞–Ω—Å –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ:* {db_user.account_balance}‚ÇΩ\n\n"
                    f"üîª –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
                await state.update_data(last_message=profile_info)
                await message.answer(profile_info, parse_mode="Markdown", reply_markup=inline_kb)
                await state.set_state(NavigationForProfile.profile)
            else:
                await message.answer("üö´ –û—à–∏–±–∫–∞. –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é /start.")
        except SQLAlchemyError as e:
            logging.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %s", e)


@router.callback_query(F.data.startswith("history_of_withdrawal") | F.data.startswith("history_page_")) #TODO –¥–æ–¥–µ–ª–∞—Ç—å –∫–∞–∫ —Å–¥–µ–ª–∞—é –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º API –±–∞–Ω–∫–∞
async def history_of_withdrawal(callback_query: CallbackQuery, state: FSMContext):
    bot = callback_query.bot
    page = 1

    if callback_query.data.startswith("history_page_"): # type: ignore
        page = int(callback_query.data.split("_")[2])  # type: ignore # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data

    items_per_page = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)  # type: ignore

    if not await check_membership(bot, callback_query):  # type: ignore
        return

    async with get_async_session() as db:
        try:
            result = await db.execute(select(User).filter(User.user_id == callback_query.from_user.id))
            db_user = result.scalar_one_or_none()

            if db_user:
                withdrawals = await db.execute(select(WithdrawalHistory)
                                               .filter(WithdrawalHistory.user_id == db_user.user_id)
                                               .order_by(desc(WithdrawalHistory.withdrawal_date)))
                
                withdrawals = withdrawals.scalars().all()

                total_withdrawals = len(withdrawals)
                start = (page - 1) * items_per_page
                end = start + items_per_page
                withdrawals_page = withdrawals[start:end]

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç —Å –≤—ã–≤–æ–¥–æ–º –∏ —Å–º–∞–π–ª–∏–∫–∞–º–∏
                text = "üí∏ *–ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤:*\n\n"
                withdrawals_info = "\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n".join(
                    [f"üîπ *ID:* {withdrawal.id}\n"
                    f"üí∞ *–°—É–º–º–∞:* {withdrawal.amount}‚ÇΩ\n"
                    f"üìÖ *–î–∞—Ç–∞:* {withdrawal.withdrawal_date.astimezone(pytz.timezone('Europe/Moscow')).strftime('%d.%m.%Y %H:%M')}\n"
                    f"üìã *–°—Ç–∞—Ç—É—Å:* {STATUS_MAP.get(withdrawal.status, '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
                    for withdrawal in withdrawals_page]) or "üîπ –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤ –ø—É—Å—Ç–∞."

                # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
                buttons = []

                # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                if page > 1:
                    buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"history_page_{page - 1}"))

                # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥", –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                if end < total_withdrawals:
                    buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"history_page_{page + 1}"))

                # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                inline_kb = InlineKeyboardMarkup(inline_keyboard=[buttons, [back_button]])

                await callback_query.message.answer(text + withdrawals_info, parse_mode="Markdown", reply_markup=inline_kb)  # type: ignore

                await state.set_state(NavigationForProfile.history_of_withdrawal)
            else:
                await callback_query.message.answer("üö´ –û—à–∏–±–∫–∞. –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é /start")  # type: ignore
        except SQLAlchemyError as e:
            logging.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ", e)


@router.callback_query(F.data == "money_withdrawal")
async def money_withdrawal(callback_query: CallbackQuery, state: FSMContext):
    await save_previous_state(state)
    bot = callback_query.bot
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id) # type: ignore

    if not await check_membership(bot, callback_query): # type: ignore
        return 
    

    instant_withdrawal = InlineKeyboardButton(text="–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥üèé", callback_data="instant_withdrawal")
    slow_withdrawal = InlineKeyboardButton(text="–í—ã–≤–æ–¥ –≤ —Ç–µ—á–µ–Ω–∏–∏ 48 —á–∞—Å–æ–≤üïì", callback_data="slow_withdrawal")
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[[instant_withdrawal, slow_withdrawal], [back_button]])

    await callback_query.message.answer("üí∏–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤:", reply_markup=inline_kb) # type: ignore
    await state.set_state(NavigationForProfile.money_withdrawal)

@router.callback_query(F.data == "instant_withdrawal")
async def instant_withdrawal(callback_query: CallbackQuery, state: FSMContext):
    bot = callback_query.bot
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id) # type: ignore

    if not await check_membership(bot, callback_query): # type: ignore
        return
    
    await callback_query.message.answer("‚ùóÔ∏è–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤‚ùóÔ∏è\n" # type: ignore
                                        "–ü—Ä–∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–º –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–∏—Å—Å–∏—è 5% –æ—Ç —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞.üí∏\n\n"
                                        "–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 100‚ÇΩ",
                                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[back_button]])) # type: ignore
    await state.set_state(NavigationForProfile.instant_withdrawal)


@router.message(NavigationForProfile.instant_withdrawal)
async def enter_instant_withdrawal(message: Message, state: FSMContext):
    try:
        amount = float(message.text)  # type: ignore

        if amount < 100:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ - 100‚ÇΩ")
            return

        async with get_async_session() as db:
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result = await db.execute(select(User).filter(User.user_id == message.from_user.id))  # type: ignore
                db_user = result.scalar_one_or_none()

                if db_user:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if db_user.account_balance >= amount:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
                        db_user.account_balance -= amount
                        await db.commit()

                        # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ withdrawal_history —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        await db.execute(insert(WithdrawalHistory).values(
                            user_id=db_user.user_id,
                            amount=amount,
                            withdrawal_date=datetime.now(),
                            status='pending',
                            is_urgent=True))  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
                        await db.commit()

                        await message.answer(f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏–Ω—è—Ç–∞\n"
                                             f"–û–∂–∏–¥–∞–Ω–∏–µ –¥–æ 10 –º–∏–Ω—É—Ç\n\n"
                                             f"–í–∞—à –±–∞–ª–∞–Ω—Å: {db_user.account_balance}‚ÇΩ")
                        await state.clear()
                    else:
                        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.")
                else:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
                    await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                    await state.clear()

            except SQLAlchemyError as e:
                logging.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %s", str(e))
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await state.clear()

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞.")


@router.callback_query(F.data == "slow_withdrawal")
async def slow_withdrawal(callback_query: CallbackQuery, state: FSMContext):
    bot = callback_query.bot
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id) # type: ignore

    if not await check_membership(bot, callback_query): # type: ignore
        return
    
    await callback_query.message.answer("‚ùóÔ∏è–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ç–µ—á–µ–Ω–∏–∏ 48 —á–∞—Å–æ–≤‚ùóÔ∏è\n–ü—Ä–∏ —ç—Ç–æ–º —Ç–∏–ø–µ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–∏—Å—Å–∏—èü§©\n\n–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 100‚ÇΩ",  # type: ignore
                                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[back_button]])) # type: ignore
    await state.set_state(NavigationForProfile.slow_withdrawal)


@router.message(NavigationForProfile.slow_withdrawal)
async def enter_slow_withdrawal(message: Message, state: FSMContext):
    try:
        amount = float(message.text)  # type: ignore

        if amount < 100:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ - 100‚ÇΩ")
            return

        async with get_async_session() as db:
            try:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result = await db.execute(select(User).filter(User.user_id == message.from_user.id))  # type: ignore
                db_user = result.scalar_one_or_none()

                if db_user:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if db_user.account_balance >= amount:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
                        db_user.account_balance -= amount
                        await db.commit()

                            # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ withdrawal_history —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        await db.execute(insert(WithdrawalHistory).values(
                            user_id=db_user.user_id,
                            amount=amount,
                            withdrawal_date=datetime.now(),
                            status='pending'))  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
                        await db.commit()

                        await message.answer(f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏–Ω—è—Ç–∞\n"
                                            f"–û–∂–∏–¥–∞–Ω–∏–µ –¥–æ 48 —á–∞—Å–æ–≤\n\n"
                                            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {db_user.account_balance}‚ÇΩ")
                        await state.clear()
                    else:
                        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.")
                else:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
                    await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                    await state.clear()

            except SQLAlchemyError as e:
                logging.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %s", str(e))
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await state.clear()

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞.")

@router.callback_query(F.data == "back_in_profile", StateFilter("*"))
async def back_in_profile(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_message = data.get("last_message")  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    if not last_message:
        last_message = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞."  # –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö

    current_state = await state.get_state()

    if current_state == NavigationForProfile.history_of_withdrawal.state or current_state == NavigationForProfile.money_withdrawal.state:
        await callback_query.message.edit_text( # type: ignore
            text=last_message,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üíº –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤", callback_data="history_of_withdrawal"),
                     InlineKeyboardButton(text="üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", callback_data="money_withdrawal")]
                ]
            ),
            parse_mode="Markdown"
        )
        await state.set_state(NavigationForProfile.profile)

    elif current_state == NavigationForProfile.instant_withdrawal.state or current_state == NavigationForProfile.slow_withdrawal.state:
        await callback_query.message.edit_text( # type: ignore
            text="üí∏–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥üèé", callback_data="instant_withdrawal"),
                     InlineKeyboardButton(text="–í—ã–≤–æ–¥ –≤ —Ç–µ—á–µ–Ω–∏–∏ 48 —á–∞—Å–æ–≤üïì", callback_data="slow_withdrawal")],
                    [back_button]
                ]
            ),
            parse_mode="Markdown"
        )
        await state.set_state(NavigationForProfile.money_withdrawal)

    else: 
        await callback_query.message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") # type: ignore
        await state.clear()
