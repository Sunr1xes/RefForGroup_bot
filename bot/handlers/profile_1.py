import logging
from aiogram import Router, F
from aiogram.types import Message
from sqlalchemy.future import select
from sqlalchemy.exc import SQLAlchemyError
from database import User, get_async_session
from membership import check_membership

#TODO –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –≤—ã–≤–æ–¥–∞ 
#TODO —Å–¥–µ–ª–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–æ–≤

router = Router()

@router.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—åüë§")
async def profile_handler(message: Message):
    bot = message.bot
    user_id = message.from_user.id # type: ignore

    if not await check_membership(bot, message): # type: ignore
        return

    async with get_async_session() as db:
        try:
            result = await db.execute(select(User).filter(User.user_id == user_id))
            db_user = result.scalar_one_or_none()

            if db_user:
                profile_info = (
                    f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n\n"
                    f"–ò–º—è: {db_user.first_name_tg}\n"
                    f"ID: {db_user.user_id}\n"
                    f"–û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {db_user.referral_earnings}\n"
                    f"–ë–∞–ª–∞–Ω—Å –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ: {db_user.account_balance}\n"
                )
                await message.answer(profile_info, parse_mode="Markdown")
            else:
                await message.answer("–û—à–∏–±–∫–∞. –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é /start")
        except SQLAlchemyError as e:
            logging.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ", e)
