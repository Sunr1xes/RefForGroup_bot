import logging
import pytz
from aiogram import types, Router, F
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from config import GROUP_CHAT_ID, ADMIN_MAKSIM, ADMIN_ROMAN

router = Router()
    
@router.callback_query(F.data == "check_user_in_group")
async def process_check_membership(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø—É.
    """
    bot = callback_query.bot
    user_id = callback_query.from_user.id  # type: ignore

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–µ
    member = await bot.get_chat_member(GROUP_CHAT_ID, user_id)  # type: ignore

    if member.status in ['member', 'administrator', 'creator']:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ
        await callback_query.message.edit_text( # type: ignore
            "üéâ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞. üöÄ"
        )  # type: ignore
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ
        await callback_query.answer(
            "‚ùóÔ∏è –í—ã –µ—â—ë –Ω–µ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç—É–ø–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            show_alert=True
        )



async def prompt_for_registration(message: Message):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    contact_button = KeyboardButton(text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    keyboard = ReplyKeyboardMarkup(keyboard=[[contact_button]], resize_keyboard=True)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await message.answer(
        "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n"
        "–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. üîí",
        reply_markup=keyboard
    )

async def menu_handler(message: Message, greeting_text: str):
    # –ö–Ω–æ–ø–∫–∏ —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ —Å–º–∞–π–ª–∏–∫–∞–º–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    profile_keyboard = KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    referrals_keyboard = KeyboardButton(text="ü´Ç –†–µ—Ñ–µ—Ä–∞–ª—ã")
    support_keyboard = KeyboardButton(text="üÜò –ü–æ–º–æ—â—å")
    work_keyboard = KeyboardButton(text="üë∑üèª‚Äç‚ôÇÔ∏è –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="show_vacancies")
    
    # –ú–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–º–∞–π–ª–∏–∫–æ–≤ –∏ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    menu_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [work_keyboard, referrals_keyboard],  # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
            [support_keyboard],  # –í—Ç–æ—Ä–æ–π —Ä—è–¥ - –ø–æ–º–æ—â—å
            [profile_keyboard]  # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ - –ø—Ä–æ—Ñ–∏–ª—å
        ], 
        resize_keyboard=True
    )
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–µ—Å–ª–∏ –±—ã–ª–∞) –∏ –≤—ã–≤–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await message.answer(greeting_text, reply_markup=types.ReplyKeyboardRemove())
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
    await message.answer("üìã *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:*", reply_markup=menu_keyboard, parse_mode="Markdown")



async def is_admins(user_id: int) -> bool:
    is_admin = user_id in [int(ADMIN_ROMAN), int(ADMIN_MAKSIM)] # type: ignore
    logging.info(f"is_admins check: user_id={user_id}, is_admin={is_admin}")
    return is_admin


# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∞–∂–¥–æ–º –º–µ–Ω—é
async def save_previous_state(state: FSMContext):
    current_state = await state.get_state()
    await state.update_data(previous_state=current_state)

async def send_transaction_list(bot, chat_id, transactions, title):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –ø–æ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    if not transactions:
        await bot.send_message(chat_id, f"{title}: ‚úÖ")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –æ–¥–Ω–æ–π
    for txn in transactions:
        transaction_text = (
            f"üìã *{title}*\n\n"
            f"üîπ *ID:* {txn.id}\n"
            f"üë® *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {txn.user.first_name_tg}\n"
            f"üë§ *–§–ò–û:* {txn.user.last_name} {txn.user.first_name} {txn.user.patronymic}\n"
            f"üí∞ *–°—É–º–º–∞:* {txn.amount}‚ÇΩ\n"
            f"üìÖ *–î–∞—Ç–∞:* {txn.withdrawal_date.astimezone(pytz.timezone('Europe/Moscow')).strftime('%d.%m.%Y %H:%M')}\n"
        )
        
        approve_button = InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{txn.id}")
        cancel_button = InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{txn.id}")
        txn_keyboard = InlineKeyboardMarkup(inline_keyboard=[[approve_button, cancel_button]])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        await bot.send_message(chat_id, transaction_text, reply_markup=txn_keyboard, parse_mode="Markdown")
