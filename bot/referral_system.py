import logging
from config import REFERRAL_PERCENTAGE
from database import get_async_session, User, Referral
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy.future import select
from sqlalchemy.orm import joinedload
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
import urllib.parse
from utils import save_previous_state
from membership import is_user_blocked, check_membership

#TODO –ø–æ–ª—É—á—à–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —Ä–∞–±–æ—Ç–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ —Å–¥–µ–ª–∞—Ç—å –Ω–∞–≥–ª—è–¥–Ω–æ —Å–∫–æ–ª—å–∫–æ —Å –∫–∞–∂–¥–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–ª
#TODO –º–± –º–± —Å–¥–µ–ª–∞—Ç—å –∫–∞–∫ –≤ —Å–∫—Ä—É–¥–∂–µ –¥–æ–Ω–∞—Ç –∫–æ–º–∞–Ω–¥–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ª—É—á—à–∏—Ö –∏ —Ç–¥)) 

router = Router()

class NavigationForReferral(StatesGroup):
    main_referral_menu = State()
    referral_link = State()

back_button = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_in_referral")

class ReferralSystem:

    @staticmethod
    async def get_users_referrals(user_id: int):
        async with get_async_session() as db:
            try:
                result = await db.execute(select(User).filter(User.user_id == user_id))
                db_user = result.scalar_one_or_none()
            
                if db_user:
                    result = await db.execute(
                        select(User)
                        .join(Referral, User.id == Referral.referral_id)
                        .filter(Referral.user_id == db_user.id)
                    )
                    referrals = result.scalars().all()
                    return referrals
                else:
                    return None
            except SQLAlchemyError as e:
                logging.error(f"Failed to get referrals: {user_id}. Error: {e}")
                return None


    @staticmethod
    async def add_referral(referrer_id: int, referral_id: int):
        async with get_async_session() as db:
            try:
                new_referral = Referral(user_id=referrer_id, referral_id=referral_id)
                db.add(new_referral)
                await db.commit()
                return True
            except SQLAlchemyError as e:
                await db.rollback()
                logging.error(f"Failed to add referral: {referrer_id} -> {referral_id}. Error: {e}")
                return False
            
    @staticmethod
    async def process_referral(user_id: int, referrer_id: int):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É. –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∫ —Ä–µ—Ñ–µ—Ä–µ—Ä—É,
        –µ—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª.
        """
        async with get_async_session() as db:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä
                result = await db.execute(select(User).filter(User.user_id == referrer_id))
                referrer = result.scalar_one_or_none()

                if not referrer:
                    return False, "‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞."

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç—è—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
                result = await db.execute(select(User).filter(User.user_id == user_id))
                user = result.scalar_one_or_none()

                if not user:
                    logging.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ users.")
                    return False, "‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏."

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                result = await db.execute(select(Referral).filter(Referral.referral_id == user_id))
                existing_referral = result.scalar_one_or_none()

                if existing_referral:
                    return False, "‚ùó –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª."

                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∑–∞–ø–∏—Å–∏
                logging.info(f"–î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ: {referrer.id} -> {user.id}")

                # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                new_referral = Referral(user_id=referrer.id, referral_id=user.id)
                db.add(new_referral)
                user.referrer_id = referrer.id
                await db.commit()

                return True, "üéâ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!"

            except SQLAlchemyError as e:
                await db.rollback()
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {e}")
                return False, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã."


@router.message(F.text == "ü´Ç –†–µ—Ñ–µ—Ä–∞–ª—ã")
async def referrals_handler(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """

    if await is_user_blocked(message.from_user.id):  # type: ignore # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        await message.answer("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        return
    
    if not await check_membership(message.bot, message):  # type: ignore # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–ª–µ–Ω—Å—Ç–≤–æ –≤ –≥—Ä—É–ø–ø–µ
        return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –≥—Ä—É–ø–ø–µ, –¥–∞–ª—å–Ω–µ–π—à–∏–π –∫–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è

    await save_previous_state(state)
    user_id = message.from_user.id  # type: ignore

    async with get_async_session() as db:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è joinedload –¥–ª—è —è–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        result = await db.execute(
            select(User)
            .options(joinedload(User.referrals).joinedload(Referral.referral_user))  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
            .filter(User.user_id == user_id)
        )
        db_user = result.unique().scalar_one_or_none()  # –ü—Ä–∏–º–µ–Ω—è–µ–º unique() –ø–µ—Ä–µ–¥ scalar_one_or_none()

        if not db_user:
            await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        referrals = db_user.referrals

        if referrals:
            referral_list = []
            for referral in referrals:
                referral_user = referral.referral_user
                if referral_user:
                    is_blocked = await is_user_blocked(referral_user.user_id)  # type: ignore
                    status = " (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)" if is_blocked else ""
                    referral_list.append(f"üë§ {referral_user.first_name_tg}{status} (ID: {referral_user.user_id}){status}")
                else:
                    referral_list.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            referral_list_text = "\n".join(referral_list)
            earnings_info = f"üí∏ *–ó–∞—Ä–∞–±–æ—Ç–æ–∫ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:* {db_user.referral_earnings} —Ä—É–±–ª–µ–π."
            response_text = (
                f"ü´Ç *–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:*\n\n"
                f"{referral_list_text}\n\n"
                f"{earnings_info}\n\n"
                f"üë∑üèª –ó–∞ –∫–∞–∂–¥—É—é –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Å–º–µ–Ω—É –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {int(REFERRAL_PERCENTAGE * 100)}% –æ—Ç —Å—É–º–º—ã —Å–¥–µ–ª–∫–∏.\n\nü§ù –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ!"
            )

        else:
            response_text = (
                "ü´Ç *–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:*\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n\n"
                f"üë∑üèª –ó–∞ –∫–∞–∂–¥—É—é –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Å–º–µ–Ω—É –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {int(REFERRAL_PERCENTAGE * 100)}% –æ—Ç —Å—É–º–º—ã —Å–¥–µ–ª–∫–∏.\n\nü§ù –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ!"
            )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏
    generate_referral_url_button = InlineKeyboardButton(text="üîó –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É", callback_data="generate_referral_url")
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[[generate_referral_url_button]])

    await state.update_data(last_message=response_text)
    await message.answer(response_text, reply_markup=inline_kb, parse_mode="Markdown")
    await state.set_state(NavigationForReferral.main_referral_menu)



@router.callback_query(F.data == "generate_referral_url")
async def referral_callback_handler(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É".
    """
    bot = callback_query.bot
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id) # type: ignore
    encoded_text = urllib.parse.quote("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –≤–º–µ—Å—Ç–µ —Å–æ –º–Ω–æ–π!")
    user_id = callback_query.from_user.id  # type: ignore
    bot_username = (await callback_query.bot.get_me()).username  # type: ignore
    referral_link = f"https://t.me/{bot_username}?start={user_id}"
    url=f"https://t.me/share/url?url={referral_link}&text={encoded_text}"

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
    invite_button = InlineKeyboardButton(text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", url=url)

    inline_kb = InlineKeyboardMarkup(inline_keyboard=[[invite_button], [back_button]])

    # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–æ–π –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    referral_text = (
        "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!* üéâ\n\n"
        "–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞!\n\n"
        f"üîó *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*\n`{referral_link}`\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n"
        "üë• –ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π –≤—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ, —Ç–µ–º –±–æ–ª—å—à–µ –±–æ–Ω—É—Å–æ–≤ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ!"
    )

    await callback_query.message.answer(referral_text, parse_mode="Markdown", reply_markup=inline_kb)  # type: ignore
    await callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback
    await state.set_state(NavigationForReferral.referral_link)

@router.callback_query(F.data == "back_in_referral", StateFilter("*"))
async def back_in_referral(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_message = data.get("last_message")

    if not last_message:
        last_message = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞."

    current_state = await state.get_state()

    if current_state == NavigationForReferral.referral_link.state:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        referral_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîó –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É", callback_data="generate_referral_url")]
        ])

        await callback_query.message.edit_text( # type: ignore
            text=last_message,
            reply_markup=referral_keyboard,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
            parse_mode="Markdown"
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(NavigationForReferral.main_referral_menu)
    else:
        await callback_query.message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")  # type: ignore
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫